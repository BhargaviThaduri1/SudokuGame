#include<bits/stdc++.h>
using namespace std;
#define N 9

vector<vector<int>>grid(9,vector<int>(9));
vector<vector<int>>temp(9,vector<int>(9));
vector<vector<int>>sudoku(9,vector<int>(9));
vector<vector<int>> sudokus(int);

bool sudoku_checker();
void generate_sudoku(int);
void show_solution();
void play();
void start_menu();
bool invalid(int s);
void update(int,int,int );
void Change_value(int ,int,int );
void print_temp();
bool solveSudoku(int,int);
void Game();
void print_sudoku();
void show();
void print();

bool play_time,help_taken = false;
int progress = 0;
int level,t;
string s;

int main(){
    play_time=true;
    while(play_time){
       play_time=false;
       Game();
        
    }
    return 0;
}
void Game(){
      play_time=false;
        start_menu();
        a:cout<<" LEVELS\n";
        cout<<" 1.EASY\n 2.MEDIUM\n 3.HARD\n";
        cout<<" Enter the level which you wish to play: ";
        cin >> level;
        if(level!=1 && level!=2 && level!=3){
            cout<<"Enter valid option\n";
            goto a;
        }
        generate_sudoku(level);
        temp = grid;
        sudoku = grid;
        progress=0;
        cout<<" Here is the sudoku.\n";
        print();
        cout<<"\nYou Have to fill the question marks(?) according to the rules mentioned.\n";
        cout<<"To fill them you need to press C TO continue...THANK YOU\n";
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[i].size();j++){
                if(grid[i][j]!=0)
                    progress++;
            }
        }
        while(progress < 81)
        {

            cout<<"\n      PROGRESS " <<progress<<"/81"<<endl;
            play();

        }
        if(!help_taken){
              cout<<"\nCONGRATULATIONS YOU HAVE SOLVED THE PUZZLE\n";
              print();
              if(sudoku_checker()){
                    cout<<"\nIT is a Valid Sudoku\n";
              }
            else {
               cout<<"\nIt is Not a Valid Sudoku...BETTER LUCK NEXT TIME\n";
               cout<<"\nHere is the solution, \n";
               if(solveSudoku(0,0)) print_sudoku();
            }

            cout<<"Enter 'YES' if you would like to play again or 'NO' to quit : ";
            cin >> s;
            if(s=="YES") {
                 cout<<"You have choosen to play again!!\n";
                 play_time=true;
            }
             else {
                 cout<<"-----Thanks For Playing----\n";
                 cout<<"QUITTING....\n";
                 exit(0);
             }
        }

           
}
void start_menu(){
    cout<<" \n\n\n      ----------------SUDOKU GAME--------------------\n\n";
    cout<<"                     Welcome to Sudoku game\n\n";
    cout<<"  RULES:\n";
    cout<<"  SHOULD NOT ENTER ANY CHARACTER OTHER THAN A DIGIT\n";
    cout<<"  Each digit from 1 to 9 should appear in row once\n";
    cout<<"  Each digit from 1 to 9 should appear in column onxe\n";
    cout<<"  On dividing the 9 * 9 grid into 9 equal parts each part should have all the digits from 1-9 occur once\n\n";

}
vector<vector<int>> sudokus(int level){
                  vector<vector<int>>store[3];

   if(level==1){
     store[0]  = { { 0 ,1, 6, 5, 7, 8, 4, 9,2 },
                   {0, 2, 9 ,1 ,3 ,4, 7 ,6 ,8 },
                   {4, 8,7, 6, 2, 9, 5, 3 ,1 },
                   {2 ,6, 3 ,4 ,1, 5 ,9, 8 ,7 },
                   {9 ,7, 4 ,8, 6, 3 ,1, 2 ,5 },
                   {8 ,5 ,1 ,7 ,9 ,2 ,6, 4 ,3 },
                   {1, 3 ,8, 9, 4, 7, 2, 5 ,6 },
                   {6 ,9, 2 ,3, 5 ,1 ,8, 7, 4 },
                   {7 ,4 ,5 ,2, 8 ,6 ,3, 1, 0}};
    
         return store[0];
   }
    else if(level==2){
    store[1]= { { 0, 0, 7, 0, 6, 0, 2, 0, 0 },
   	{ 0, 0, 2, 1, 0, 0, 0, 8, 7 },
	{ 5, 0, 0, 2, 4, 0, 0, 1, 0 },
	{ 7, 0, 4, 9, 5, 8, 1, 6, 0 },
	{ 0, 8, 0, 3, 0, 2, 0, 7, 9 },
	{ 2, 1, 0, 0, 7, 0, 0, 0, 0 },
	{ 9, 2, 0, 0, 8, 0, 3, 4, 0 },
	{ 4, 7, 3, 0, 0, 0, 0, 0, 1 },
	{ 8, 0, 0, 0, 3, 9, 0, 0, 0 } }; 

          return store[1];
    }
    else {
    store[2] = { { 0, 4, 0, 8, 0, 0, 0, 0, 0 },
    { 5, 0, 1, 0, 0, 0, 0, 0, 4 },
    { 8, 0, 0, 0, 0, 9, 0, 6, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 2, 0, 0, 0, 0, 6, 4, 0, 5 },
    { 0, 9, 0, 0, 0, 7, 0, 8, 0 },
    { 0, 0, 0, 0, 1, 0, 7, 0, 0 },
    { 0, 0, 0, 0, 6, 0, 2, 0, 0 },
    { 3, 0, 4, 9, 0, 0, 0, 0, 1 } 
	 }; 
    return store[2];
    }                                                                                                                        
}

void generate_sudoku(int l){
    if(l==1){
        grid = sudokus(1);
    
    }
    else if(l==2){
        grid = sudokus(2);
    }
    else if(l==3){
        grid = sudokus(3);
    }
}

bool row_check(){
        int c[10] ={0};
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                c[grid[i][j]]++;
            }
            for(int k=1;k<=9;k++){
                if(c[k]!=1) return false;
            }
            for(int k=1;k<=9;k++) c[k] = 0;
        }
        return true;

}

bool col_check(){
     int c[10] ={0};
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                c[grid[j][i]]++;
            }
            for(int k=1;k<=9;k++){
                if(c[k]!=1) return false;
            }
            for(int k=1;k<=9;k++) c[k] = 0;
        }
        return true;
}

bool square_check(){
    int c[10]={0};
    for(int m = 0;m<9;m+=3){
        for(int n = 0;n<9;n+=3){
            for(int i=m;i<m+3;i++){
                for(int j=n;j<n+3;j++)
                    c[grid[i][j]]++;
            }
            for(int k=1;k<=9;k++){
                if(c[k]!=1) return false;
            }
            for(int k=1;k<=9;k++) c[k] = 0;
        }

    }
    return true;
}

bool sudoku_checker(){
    help_taken=false;
    if(row_check() && col_check() && square_check()) return true;
    else return false;
}   

bool isSafe( int row,int col, int num){

	for (int i = 0; i < sudoku.size(); i++)
		if (sudoku[row][i] == num)
			return false;
	for (int j = 0; j <= 8; j++)
		if (sudoku[j][col] == num)
			return false;
	int startRow = row - row % 3,
			startCol = col - col % 3;

	for (int i = 0; i < 3; i++){
		for (int j = 0; j < 3; j++){
			if (sudoku[i + startRow][j +startCol] == num)
				return false;
        }
    }

	return true;
}

bool solveSudoku( int row, int col)
{
	if (row == N - 1 && col == N)
		return true;

	if (col == N) {
		row++;
		col = 0;
	}

	if (temp[row][col] > 0)
		return solveSudoku( row, col + 1);

	for (int num = 1; num <= N; num++){
		
		if (isSafe(row, col, num)){
		
			sudoku[row][col] = num;
	
			if (solveSudoku(row, col + 1))
				return true;
		}
	
		sudoku[row][col] = 0;
	}
	return false;
}
void print_sudoku(){
    cout<<"\n\n";
    for(int i=0;i<9;i++){
        for(int j=0;j<9;j++){
            cout<<" "<<sudoku[i][j]<<" | ";
        }
        cout<<endl;
    }
    cout<<"\n";
}
void show_solution(){
    string s;
    help_taken=true;
    if(solveSudoku(0,0)){
        cout<<"You have choosen to see the solution..\n";
        print_sudoku();
        progress = 81;
        cout<<"\n Progress : 81/81\n";
        cout<<" Would you wanted to play again?\n";
        cout<<" Enter 'YES' to play again and 'NO' to exit ";
        cin >> s;
        if(s=="YES"){
            cout<<" You have choosen to play again\n";
            play_time=true;
            help_taken=false;
            Game();
            return;
        }
        else{
            cout<<"\n Quitting \n";
            exit(0);
        }
    }

    else {
        print();
        cout<<"\n\nNo solution exits!!\n"<<endl;
    }

    

}
void continue_playing(){
         int r,c,value;
         cout<<"Enter the row number: ";
        cin >> r;
        if(invalid(r)){
            cout<<"Please Enter valid row number (1-9)\n";
            cin >> r;
        }
        cout<<"Row Seletected: "<<r<<endl;
        cout<<"Enter the column number: ";
        cin >> c;
        if(invalid(c)){
            cout<<"Please Enter valid column number (1-9):";
            cin >> c;
        }
        cout<<"Column Selected: "<<c<<endl;
        cout<<"Enter the value at row:"<<r<<"col:"<<c<<" ";
        cin >> value;
        if(invalid(value)){
            cout<<"Please Enter the valid value between 1 to 9: ";
            cin >> value;
        }
        update(r-1,c-1,value);
        print();
        cout<<endl;
}
void deletition(){
            int del_row,del_col,val;
            cout<<"\nEnter the row and column number of the value which you want to change: ";
            cin >> del_row >> del_col;
            if(invalid(del_row)){
                cout<<"Please enter valid row number: ";
                cin >> del_row;
            }
            if(invalid(del_col)){
                cout<<"Please enter valid column number: ";
                cin >> del_col;
            }
            cout<<"Enter the changed value at row: "<<del_row<<" col: "<<del_col<<" ";
            cin >> val;
            if(invalid(val)){
                cout<<"Please enter valid value (0-9): ";
                cin >> val;
            }
            Change_value(del_row-1,del_col-1,val);
}
void play(){
    if(progress==81) return;
    string ask;
    cout<<"\n Enter 'A' TO see the solution\n";
    cout<<" Enter 'B' TO Go to main menu\n";
    cout<<" Enter 'C' TO continue\n";
    cout<<" Enter 'D' TO delete an element you have entered\n";
    cout<<" Enter 'E' TO quit from the game\n";
    cout<<endl;
   a: cout<<"Enter the option : ";
    cin >> ask;
    if(ask=="A"){
        show_solution();
        return;
    }
    else if(ask=="B"){
        start_menu();
        return;
    }
    else if(ask=="C"){
         continue_playing();
        return;

    }
    else if(ask=="D"){
            deletition();
            return;
    }
    else if(ask=="E"){
        cout<<"\nYou have choosen to quit!!!\n";
        cout<<"THANKS FOR PLAYING\n";
        exit(0);
    }
    else{
        cout<<"Please Enter valid option!!\n";
        goto a;
    }
}
void Change_value(int row,int col,int val){
    if(temp[row][col]==0){
     grid[row][col] = val;  
     cout<<"\n Value has been updated at "<<row+1<<" "<<col+1<<" to "<<val<<endl;
     print();
    } 
    else cout<<"\n You cannot make any update in fixed values..\n";  

}
void update(int a,int b,int value){
    if(grid[a][b]==0){
       
     grid[a][b] = value;
     progress++;
    }
    else{
        cout<<"\n  WARNING\n ";
        cout<<" You can only enter values in the open spaces!!!----\n";

    }
}
bool invalid(int s){
        vector<int> a = {1,2,3,4,5,6,7,8,9};
        for(auto i:a ){
            if(i==s) return false;
        }
        return true;

}
void print(){
    cout<<"\n";
    for (int i = 0; i < grid.size(); i++)
    {
        for (int j = 0; j < grid[i].size(); j++)
        {
        if(grid[i][j]==0) cout <<" "<< "?" << " | ";

        else cout<<" "<< grid[i][j] << " | ";
        }   
        cout << endl;
    }
}
